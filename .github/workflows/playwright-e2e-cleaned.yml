name: Playwright E2E (live server) - cleaned

on:
  push:
    branches: [ main, '**' ]
  pull_request:
    branches: [ main, '**' ]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libxss1 libgbm1 libxcomposite1 libxrandr2 libasound2 curl

      - name: Create venv & install Python deps
        run: |
          python -m venv doc_processor/venv
          . doc_processor/venv/bin/activate
          pip install --upgrade pip
          pip install -r doc_processor/requirements.txt
          pip install playwright pytest-playwright
          python -m playwright install --with-deps

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install UI deps
        working-directory: ui_tests
        run: npm ci

      - name: Start Flask app
        env:
          FAST_TEST_MODE: '1'
          SKIP_OLLAMA: '1'
        run: |
          chmod +x ./start_app.sh
          nohup ./start_app.sh > doc_processor/logs/ci_app.log 2>&1 &
          echo $! > app.pid
          for i in {1..60}; do
            if curl -sSf http://127.0.0.1:5000/ >/dev/null 2>&1; then
              echo "app is up"
              break
            fi
            echo "waiting for app... ($i)"
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:5000/ >/dev/null 2>&1; then
            echo "app did not start"; tail -n 200 doc_processor/logs/ci_app.log || true; exit 1
          fi

      - name: Run Playwright tests
        working-directory: ui_tests
        env:
          PLAYWRIGHT_E2E: '1'
          FAST_TEST_MODE: '1'
          SKIP_OLLAMA: '1'
        run: npx playwright test e2e --reporter=list

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: doc_processor/tests/e2e/artifacts/

      - name: Tear down Flask app
        if: always()
        run: |
          if [ -f app.pid ]; then kill "$(cat app.pid)" || true; rm -f app.pid; fi
          tail -n 200 doc_processor/logs/ci_app.log || true
