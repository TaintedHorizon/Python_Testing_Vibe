# This file specifies all the Python package dependencies required for the `doc_processor` application to function correctly.
# Using a `requirements.txt` file is a standard practice in Python development for ensuring reproducibility of the environment.
# To install all the packages listed here, navigate to this directory in your terminal and run the command:
# pip install -r requirements.txt
#
# Version Pinning:
# Some packages have their versions "pinned" (e.g., `Pillow==9.5.0`). This is a crucial practice for production-ready applications
# because it guarantees that the application will always use that exact version of the library, preventing unexpected breaking changes
# that can occur when a library releases a new, incompatible version.
# Other packages are listed without a version, which means `pip` will install the latest available version. This is more flexible but can be riskier.

# --- Core Web Framework ---
# Flask is a lightweight and flexible "microframework" for Python. It is the backbone of this application,
# used to create the web server, define URL routes (e.g., `/`, `/verify`), and handle HTTP requests and responses.
Flask

# --- Configuration Management ---
# python-dotenv is a small but essential utility. It allows the application to load configuration settings
# (like database paths, API keys, or directory locations) from a local `.env` file into the system's environment variables.
# This keeps sensitive or environment-specific settings out of the source code.
python-dotenv

# --- OCR (Optical Character Recognition) Engine ---
# easyocr is the primary OCR library used in this project. It is a user-friendly, deep-learning based OCR toolkit
# that can recognize text in images. It is used to extract the raw text content from the scanned document pages.
easyocr

# --- Secondary OCR and Image Analysis Tool ---
# pytesseract is a Python wrapper for Google's Tesseract-OCR Engine. In this project, it is not used for its main OCR function,
# but for a specific, powerful feature: Orientation and Script Detection (OSD). The application uses it to determine
# the correct orientation of a scanned page and automatically rotate it if it's upside down or sideways.
# Version is pinned to 0.3.10 for stability.
pytesseract==0.3.10

# --- Image Processing Library ---
# Pillow is a fork of the Python Imaging Library (PIL) and is the de-facto standard for opening, manipulating, and
# saving many different image file formats in Python. It is a critical dependency for both `easyocr` and `pytesseract`,
# as they both use Pillow Image objects as their primary input.
# Version is pinned to 9.5.0.
Pillow==9.5.0

# --- Computer Vision Backend ---
# opencv-python-headless provides pre-built OpenCV (Open Source Computer Vision Library) packages for Python.
# The `headless` version means it does not include any GUI components (like `cv2.imshow()`), making it ideal for server-side applications.
# It is a core dependency for `easyocr`, providing the underlying algorithms for image manipulation and analysis.
# Version is pinned to 4.8.0.76.
opencv-python-headless==4.8.0.76

# --- PDF and Image Data Handling ---
# pdf2image is a convenient wrapper around the `pdftoppm` utility. Its sole purpose is to convert pages from a PDF document
# into a list of Pillow Image objects, which can then be fed into the OCR and image processing pipelines.
pdf2image

# numpy (Numerical Python) is the fundamental package for numerical and scientific computing in Python.
# In the context of this project, it's primarily used for handling image data, which is often represented as large, multi-dimensional arrays of pixel values.
# Many computer vision and machine learning libraries, including OpenCV and EasyOCR, are built on top of NumPy.
# Version is pinned to 1.26.4.
numpy==1.26.4

# PyMuPDF (also known as `fitz`) is a high-performance Python library for data extraction and manipulation of PDF documents.
# In this application, it serves a very specific and important purpose: creating searchable PDFs. After the text has been extracted
# from an image, PyMuPDF is used to create a new PDF file where the original scanned image is the background, and an invisible
# text layer is placed on top of it. This allows users to search for text within the final PDF document.
PyMuPDF

# --- Database Toolkit ---
# SQLAlchemy is a comprehensive SQL toolkit and Object-Relational Mapper (ORM). It provides a high-level, Pythonic way to interact
# with relational databases. In this project, it is used to define the structure of the database tables (the schema)
# in a programmatic way, which is more maintainable and database-agnostic than writing raw SQL `CREATE TABLE` statements.
SQLAlchemy

# --- HTTP Communication ---
# requests is a simple, elegant, and widely-used HTTP library for Python. It makes sending HTTP requests (e.g., GET, POST)
# incredibly easy. In this project, it is used to communicate with external Large Language Model (LLM) APIs, such as Ollama,
# sending them prompts and receiving the generated responses.
requests
