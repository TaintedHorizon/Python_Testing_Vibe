file,write_type,statement,writes,uses_app_config,recommendation
"tools/sdcard_imager/SDCardImager.py","log file","LOG_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sd_card_imager_error.log')","\"with open(LOG_FILE_PATH, 'a') as log_f: log_f.write(...)\"; \"initialization writes\"",false,"Read LOG_FILE_PATH from config/env; avoid writing logs into repo tree."
"doc_processor/routes/admin.py","cache dir / log path","cache_dir = '/tmp/analysis_cache'; log_file = '/path/to/app.log'","shutil.rmtree(cache_dir); os.makedirs(cache_dir; open(log_file,'r'))",false,"Use app_config.LOG_FILE_PATH and a configurable cache dir or tempfile.gettempdir()."
"doc_processor/services/export_service.py","export files (placeholders)","pdf_path = f'/tmp/export/batch_{batch_id}_doc_{i+1}.pdf' and export_dir = '/tmp/exports'","pdf_path/image_path placeholders used as created file paths",false,"Use app_config.EXPORT_DIR or parameterize export dir and create if missing."
"doc_processor/app_original_backup.py","cache file","cache_file = '/tmp/intake_analysis_cache.pkl'","open(cache_file,'rb'/'wb') and tarfile operations",false,"Prefer tempfile.gettempdir() or configurable BACKUP/CACHE_DIR from app_config."
"doc_processor/routes/batch.py","cache file","cache_file = '/tmp/intake_analysis_cache.pkl'","open(cache_file, 'rb')",false,"Use tempfile or app_config for caches."
"doc_processor/routes/export.py","export/processed placeholders","export_dir = '/tmp/exports'; processed_dir = '/tmp/processed'","Image.save(converted_pdf_path, 'PDF', ...) (saves to converted path)",false,"Replace with app_config.EXPORT_DIR and app_config.PROCESSED_DIR or pass dirs as params."
"doc_processor/dev_tools/reset_environment.py","categories backup file","CATEGORIES_BACKUP_FILE = 'custom_categories_backup.json'","with open(CATEGORIES_BACKUP_FILE, 'w') as f: json.dump(...)",false,"Allow backup path via env or app_config.BACKUP_DIR."
"archive/legacy/Document_Scanner_Ollama_outdated/document_processor_gem.py","legacy outputs/ocr/md","os.path.join(destination_dir, f'{new_name_base}.pdf')","shutil.copy2(source_pdf_path, original_copy_path); ocr_doc_obj.save(ocr_copy_path); open(markdown_path,'w')",false,"Migrate legacy scripts to doc_processor/config_manager or mark archival."
"doc_processor/app_monolithic_backup.py","cache file","cache_file = '/tmp/intake_analysis_cache.pkl'","open(cache_file,'rb'/'wb')",false,"Use tempfile or config for cache path."
"scripts/run_local_e2e.sh","pid file","echo $! > /tmp/run_local_e2e_app.pid","write pid file to /tmp",false,"Document or make PID path configurable if needed."
"doc_processor/dev_tools/recover_source_images.py","copy to filing cabinet or fallback","shutil.copy2(src, dest) where dest defaults to filing cabinet category dir","shutil.copy2(src, dest)",true,"Patched: now falls back to RECOVER_SOURCE_BASE env or tempfile.gettempdir() if filing cabinet not writable."
"doc_processor/dev_tools/cleanup_orphaned_wip.py","backup directory / remove","shutil.copytree(batch_wip_dir, backup_batch_dir); shutil.rmtree(batch_wip_dir)","shutil.copytree(...); shutil.rmtree(...); os.makedirs(backup_dir)",true,"Patched: backups now go to WIP_CLEANUP_BACKUP_BASE env or tempfile.gettempdir()."
"doc_processor/dev_tools/restore_categories.py","read backup JSON and DB inserts","with open(CATEGORIES_BACKUP_FILE, 'r') as f: json.load(f)","open(CATEGORIES_BACKUP_FILE, 'r')",false,"Patched: CATEGORIES_BACKUP_FILE now read from CATEGORIES_BACKUP_DIR env or tempfile.gettempdir()."
"doc_processor/dev_tools/recover_batch_tags.py","markdown regen + optional DB updates","with open(path, 'w', encoding='utf-8') as f: f.write(markdown_content)","open(path, 'w')",true,"Regenerate_markdown falls back to FILING_CABINET_DIR env or tempfile.gettempdir() when filing_base missing. Also fixed get_pixmap/getPixmap compatibility."
"doc_processor/dev_tools/fetch_pdfjs.py","static asset download","static_dir = ...; dest.write_bytes(data)","Path.write_bytes(...)",false,"Supports PDFJS_DEST env override to write assets to an alternate location (helpful for CI)."
"doc_processor/processing.py","document processing outputs (processed, searchable, originals, archive)","shutil.copy2(..., dest); open(markdown_path, 'w'); os.makedirs(...); shutil.rmtree(batch_dir)","shutil.copy2(src, dest); open(markdown_path,'w'); os.makedirs(...); shutil.rmtree(...)",true,"Ensure all output directories are derived from app_config or injected paths; validate before writing."
"doc_processor/database.py","database backups and file removals","shutil.copy2(src, dest); os.makedirs(backup_root, exist_ok=True); os.remove(image_path)","shutil.copy2(...); os.makedirs(...); os.remove(...)",true,"Use configuration-controlled backup directories (config_manager.app_config) and avoid implicit writes to repo tree."
"doc_processor/routes/intake.py","intake temp copies and removals","shutil.copy2(pdf_path, temp_pdf_path); os.remove(old_pdf)","shutil.copy2(...); os.remove(...); os.makedirs(...)",true,"Use tempfile or app_config-managed temp dirs for temporary copies."
"doc_processor/routes/manipulation.py","serve/preview cached PDFs","return send_file(pdf_abs, mimetype='application/pdf', as_attachment=False); return send_file(cache_path)","send_file(path, ...) (serves files from processed/cache locations)",true,"Confirm processed/cache locations come from app_config and are not arbitrary paths."
"doc_processor/batch_guard.py","backup/copy operations","shutil.copy2(path, dest_dir); os.makedirs(dest_dir, exist_ok=True)","shutil.copy2(...); os.makedirs(...); shutil.rmtree(...)",true,"Use app_config paths for retention and backup directories and allow overrides for CI/tests."
"doc_processor/app.py","application log directory","os.makedirs(log_dir, exist_ok=True); open(log_file, 'a')","os.makedirs(...); open(..., 'a')",true,"Log directory should be controlled by app_config.LOG_FILE_PATH/LOG_DIR and default to a safe system location if unset."
"tools/file_utils/file_copy_regex.py","file copy to destination paths","shutil.copy2(source_file_path, destination_file_path) with os.makedirs(os.path.dirname(destination), exist_ok=True)","shutil.copy2(source, dest); os.makedirs(destination_parent)",false,"Make destination base configurable and document that the tool will write to disk; consider using a tempdir for unsafe defaults."
"dev_tools/retention_and_rotate.py","archive (tar.gz) and deletions","with tarfile.open(dest, 'w:gz') as tar: tar.add(...); shutil.rmtree(src)","tarfile.open(dest, 'w:gz'); shutil.rmtree(...)",false,"Allow archive destination to be set via env var and avoid hard-coded paths."
"dev_tools/cleanup_test_artifacts.py","archive and copy artifacts","with tarfile.open(target_tar, 'w:gz') as tar: ...; shutil.copy2(src, dst)","tarfile.open(...); shutil.copy2(...); shutil.copytree(...)",false,"Prefer configurable artifact output dir (use .env.test for CI)."
"doc_processor/tests/e2e/conftest.py","e2e artifacts and logs","os.makedirs(artifacts_dir, exist_ok=True); shutil.copy2(app_log, os.path.join(artifacts_dir, ...))","os.makedirs(...); shutil.copy2(...)",false,"E2E tests should use `doc_processor/.env.test` and write artifacts to /tmp or CI-configured artifacts dir."
"doc_processor/tests/test_db_backup.py","test helper file writes","db_file.write_bytes(b'')  # create empty file","Path.write_bytes(...); os.makedirs(...)",false,"Tests should use tmp_path fixtures or .env.test to avoid writing into repo tree."
"doc_processor/tests/test_gui_inprocess.py","sample data writes","dest.write_bytes(sample_path.read_bytes())","Path.write_bytes(...); os.makedirs(...)",false,"Use pytest tmp_path for test artifacts or .env.test override."
"doc_processor/dev_tools/cleanup_filing_cabinet_names.py","backup and rename operations","shutil.copytree(self.filing_cabinet_path, self.backup_dir); shutil.copy2(src, dst); os.remove(item_path)","shutil.copytree(...); shutil.copy2(...); os.remove(...)",true,"Backups should go to a configurable backup base (DEV_TOOL_BACKUP_DIR) or tempfile to avoid repo modifications."
"doc_processor/dev_tools/database_setup.py","database bootstrap (create directories)","os.makedirs(db_dir, exist_ok=True); create database files","os.makedirs(...); open(...)",false,"Allow DB output location to be configured via .env or app_config for safe test runs."
"doc_processor/dev_tools/manual_tests/complete_workflow_demo.py","cleanup/teardown artifacts","if base.exists(): shutil.rmtree(base); shutil.rmtree(base, ignore_errors=True)","shutil.rmtree(...); os.remove(...)",false,"Manual demo scripts should document where they write and offer configurable artifact locations."
"Document_Scanner_Ollama_outdated/document_processor_gca.py","legacy processing outputs","shutil.copy2(source_pdf_path, original_copy_path); with open(markdown_path, 'w', encoding='utf-8')","shutil.copy2(...); open(markdown_path,'w')",false,"Legacy script â€” treat as archival or migrate to `doc_processor/config_manager`."
"Document_Scanner_Ollama_outdated/document_processor_gem.py","legacy processing outputs","shutil.copy2(source_pdf_path, original_copy_path); open(markdown_path, 'w')","shutil.copy2(...); open(markdown_path,'w')",false,"Legacy script; do not auto-modify without a migration plan."
"archive/legacy/Document_Scanner_Gemini_outdated/document_processor.py","legacy processing outputs","open(markdown_path, 'w', encoding='utf-8') and fitz/pyMuPDF image saves","open(...); Image.save(...); pix.tobytes(...)",false,"Legacy script; mark as archive or migrate."
"archive/legacy/Document_Scanner_Ollama_outdated/document_processor_gca.py","legacy processing outputs","shutil.copy2(source_pdf_path, original_copy_path); with open(markdown_path, 'w')","shutil.copy2(...); open(markdown_path,'w')",false,"Legacy script; treat as archive or migrate."
"doc_processor/document_detector.py","temporary image/pdf files and removals","os.makedirs(norm_root, exist_ok=True); os.remove(fpath)","os.makedirs(...); os.remove(...); tempfile writes",true,"Ensure temp outputs use tempfile or app_config paths and are cleaned up."
"doc_processor/routes/api.py","API rasterization & serving","pix_method = getattr(page, 'get_pixmap', None) ...; send_file(...)","pix.tobytes(...); send_file(...); temporary image generation",true,"Confirm rasterization uses safe temp locations and served files are from configured processed/original dirs."
"doc_processor/services/rotation_service.py","rotation cache / modified images","open(..., 'wb'); Image.save(...)","Image.save(...); open(..., 'wb'); os.remove(...)",true,"Use app_config-managed cache directories and validate permissions before writing."
"doc_processor/static/pdfjs/*","static pdfjs assets (bundle)","static_dir = ...; Path.write_bytes(data)","Path.write_bytes(...); large static files (pdf.min.js + maps)",false,"Treat pdfjs as an asset bundle; allow PDFJS_DEST override for CI."
"doc_processor/tests/e2e/**","e2e artifacts and logs","os.makedirs(artifacts_dir, exist_ok=True); shutil.copy2(..., artifacts_dir)","os.makedirs(...); shutil.copy2(...)",false,"E2E tests should be annotated and write to CI-configured artifacts dir or /tmp; register playwright mark in pytest.ini if used."
"doc_processor/tests/**","unit/integration test artifacts","Path.write_bytes(...); open(..., 'wb'); os.makedirs(...)","Path.write_bytes(...); open(..., 'wb'); os.makedirs(...)",false,"Tests should use pytest tmp_path or .env.test to avoid writing into repo tree (most tests already do)."
"tools/download_manager/download_manager.py","downloaded file writes","with open(file_path, 'wb') as f: f.write(...) ; os.remove(file_path)","open(..., 'wb'); os.remove(...); os.makedirs(download_dir)",false,"Make download destination configurable; avoid hard-coded directories."
"tools/download_manager/download_manager_gui.py","downloaded file writes (GUI)","with open(file_path, 'wb') as f: ...; os.remove(file_path)","open(..., 'wb'); os.remove(...); os.makedirs(download_dir)",false,"Make download destination configurable for safety."
